/*  Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
*/

-----------------------------------------------------------------------------------------

class Solution {
    
public:
    vector<int> findAnagrams(string s, string p) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        vector<int> hash(26,0),hash1(26,0);
        int i,j,m = s.length(),n = p.length();
        if(s.empty() or m<n)
            return {};
        vector<int> v;
        for(i=0;i<n;i++){
            hash1[p[i]-97] += 1;
            hash[s[i]-97] += 1; 
        }
        
        if(hash == hash1)
            v.push_back(0);
        
        for(j = 1;j+n-1<m;j++){
            hash[s[j-1]-97] -= 1;
            hash[s[j+n-1]-97] += 1;
            if(hash == hash1)
                v.push_back(j);
        }
         return v;
    }
};
