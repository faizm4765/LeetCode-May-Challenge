/*  In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

*/

----------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        
        if(root == NULL)
            return 0;
        
        queue<pair<TreeNode*,TreeNode*> >q;
        q.push({root,NULL});
        
        int f = 0,g = 0,level = 0,a,b;
        TreeNode* parentP = NULL,*parentQ = NULL;
        
        while(1){
            
            
            int nodes = q.size();
            if(nodes == 0)
                break;
            
            while(nodes--){
                
                TreeNode* t = q.front().first;
                TreeNode* parent = q.front().second;
                q.pop();
                
                if(t->left)
                    q.push({t->left,t});
                
                if(t->right)
                    q.push({t->right,t});
                
                if(t->val == x){
                    f = 1;
                    a = level;
                    parentP = parent;
                }
                
                if(t->val == y){
                    g = 1;
                    b = level;
                    parentQ = parent;
                }
                if(f&g)
                    break;
                
            }
            if(f&g){
                if(a == b and parentP != parentQ)
                    return 1;
            }
            level++;
        }
        
        return 0;
    }
};
